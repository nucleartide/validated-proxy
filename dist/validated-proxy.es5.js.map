{"version":3,"file":"validated-proxy.es5.js","sources":["../src/utils/has-own-property.ts","../src/buffered-proxy.ts","../src/utils/validator-lookup.ts","../src/validation-result.ts","../src/validated-proxy.ts","../src/index.ts"],"sourcesContent":["/**\n * Shorthand for `Object.prototype.hasOwnProperty`. Returns a boolean indicating\n * whether the object has the specified property as own (not inherited)\n * property. Useful when the object was created with `Object.create(null)`.\n *\n * ```ts\n * hasOwnProperty({ foo: 1 }, 'foo'); // true\n * ```\n *\n * @param obj\n * @param args\n */\nexport default function hasOwnProperty(\n  obj: object,\n  ...args: PropertyKey[]\n): boolean {\n  return Object.prototype.hasOwnProperty.apply(obj, args);\n}\n","import hasOwnProperty from './utils/has-own-property';\nimport ValidationResult from './validation-result';\n\nexport type BufferErrorHandler = (messages: string[]) => void;\nexport type BufferExecutionHandler = (\n  target: object,\n  changes: object\n) => object;\n\nexport interface IBufferError {\n  key: PropertyKey;\n  value: any;\n  messages: string[];\n}\n\nexport interface IBufferChange {\n  key: PropertyKey;\n  value: any;\n}\n\nexport interface IBufferOptions {\n  errorHandler?: BufferErrorHandler;\n  executionHandler?: BufferExecutionHandler;\n}\n\nexport interface IBufferCache {\n  [key: string]: ValidationResult;\n}\n\n/**\n * If no execution handler is defined, this is the default.\n *\n * @internal\n */\nconst defaultExecutionHandler = Object.assign;\n\n/**\n * If no error handler is defined, this is the default.\n *\n * @internal\n */\nconst defaultErrorHandler = () => {}; // tslint:disable-line no-empty\n\n/**\n * A `BufferedProxy` is a wrapper around a target object. Before values are\n * set on the `BufferedProxy`, they are first validated. If the result is valid,\n * we store the value in the cache. If it's not, we store it in our error cache.\n *\n * When ready, the `BufferedProxy` can be flushed, and the cached changes will\n * be set onto the target object with an overridable `executionHandler`.\n */\nexport default class BufferedProxy {\n  /**\n   * Overridable error handler. Invoked when a `ValidationResult` is invalid.\n   */\n  public errorHandler: BufferErrorHandler;\n\n  /**\n   * Overridable execution handler. Invoked when the `BufferedProxy` is flushed.\n   */\n  public executionHandler: BufferExecutionHandler;\n\n  private target: object;\n  private ['__cache__']: IBufferCache = Object.create(null);\n  [key: string]: any;\n\n  /**\n   * Creates a new instance of `BufferedProxy`.\n   *\n   * ```ts\n   * const user = { name: 'Lauren' };\n   * new BufferedProxy(user, bufferOptions);\n   * ```\n   *\n   * @param target\n   * @param bufferOptions\n   */\n  constructor(\n    target: object,\n    { errorHandler, executionHandler }: IBufferOptions = {}\n  ) {\n    this.target = target;\n    this.errorHandler = errorHandler || defaultErrorHandler;\n    this.executionHandler = executionHandler || defaultExecutionHandler;\n    this.bufferedProxy = this;\n  }\n\n  /**\n   * Returns cached changes as an object.\n   *\n   * ```ts\n   * bufferedProxy.changed; // { name: 'Lauren' };\n   * ```\n   */\n  public get changed(): object {\n    return this.validResults.reduce((acc, { key, value }) => {\n      acc[key] = value;\n      return acc;\n    }, Object.create(null));\n  }\n\n  /**\n   * Returns cached errors as an object.\n   *\n   * ```ts\n   * bufferedProxy.errored;\n   * {\n   *   name: {\n   *     value: 'Lauren Elizabeth',\n   *     messages: ['Name is too long']\n   *   }\n   * };\n   * ```\n   */\n  public get errored(): object {\n    return this.invalidResults.reduce((acc, { key, messages, value }) => {\n      acc[key] = { messages, value };\n      return acc;\n    }, Object.create(null));\n  }\n\n  /**\n   * Returns cached changes as an array.\n   *\n   * ```ts\n   * bufferedProxy.changes; // [{ key: 'name', value: 'Lauren' }]\n   * ```\n   */\n  public get changes(): IBufferChange[] {\n    return this.validResults.map(({ key, value }) => {\n      return { key, value };\n    });\n  }\n\n  /**\n   * Returns cached errors as an array.\n   *\n   * ```ts\n   * bufferedProxy.errors;\n   * [\n   *   { key: 'name', messages: ['must be letters'], value: 123 }\n   * ]\n   * ```\n   */\n  public get errors(): IBufferError[] {\n    return this.invalidResults.map(({ key, messages, value }) => {\n      return { key, messages, value };\n    });\n  }\n\n  /**\n   * Sets a value or error into the cache, after the change has been\n   * validated. Invokes the `errorHandler`, if present.\n   *\n   * ```ts\n   * const user = { name: 'Lauren' };\n   * const bufferedProxy = new BufferedProxy(user);\n   * bufferedProxy.set(\n   *   'name',\n   *   new ValidationResult('name', 'Lauren Elizabeth', [\n   *     {\n   *       message: ['name must be greater than 3 characters'],\n   *       validation: true\n   *     }\n   *   ])\n   * );\n   * bufferedProxy.get('name'); // 'Lauren Elizabeth'\n   * ```\n   *\n   * @param key\n   * @param validationResult\n   */\n  public set(key: PropertyKey, result: ValidationResult): ValidationResult {\n    if (key === '__cache__') {\n      this.bufferedProxy.__cache__ = result;\n      return;\n    }\n    if (result.isInvalid) {\n      this.errorHandler(result.messages);\n    }\n    return this.updateCache(result);\n  }\n\n  /**\n   * Applies all the changes to the target object with the `executionHanlder`,\n   * then resets the cache to an empty state. The default `executionHandler`\n   * is `Object.assign`, which mutates the target object directly.\n   *\n   * ```ts\n   * const user = { name: 'Lauren' };\n   * const bufferedProxy = new BufferedProxy(user);\n   * bufferedProxy.set(\\/* ... *\\/);\n   * bufferedProxy.flush();\n   * user.name; // 'Lauren Elizabeth'\n   * ```\n   */\n  public flush(): object {\n    const flushed = this.executionHandler(this.target, this.changed);\n    this.reset();\n    return flushed;\n  }\n\n  /**\n   * Retrieve value or error from cache by key. Returns property on the buffered\n   * proxy as a fallback, followed by the target object.\n   *\n   * ```ts\n   * bufferedProxy.get('name'); // 'Lauren'\n   * ```\n   *\n   * @param key\n   */\n  public get(key: PropertyKey) {\n    if (hasOwnProperty(this.cache, key)) {\n      return this.bufferedProxy.cache[key].value;\n    }\n    if (this[key]) {\n      return this[key];\n    }\n    return this.target[key];\n  }\n\n  /**\n   * Resets the cache.\n   *\n   * ```ts\n   * bufferedProxy.get('name'); // 'Lauren Elizabeth'\n   * bufferedProxy.reset();\n   * bufferedProxy.get('name'); // 'Lauren'\n   * ```\n   */\n  public reset(): void {\n    this.bufferedProxy.__cache__ = Object.create(null);\n  }\n\n  private get cache() {\n    return this.__cache__;\n  }\n\n  private updateCache(result: ValidationResult): ValidationResult {\n    this.bufferedProxy.cache[result.key] = result;\n    return result;\n  }\n\n  private get validResults(): ValidationResult[] {\n    return Object.values(this.cache).filter(r => r.isValid);\n  }\n\n  private get invalidResults(): ValidationResult[] {\n    return Object.values(this.cache).filter(r => r.isInvalid);\n  }\n}\n","import ValidationResult, { IValidationMeta } from '../validation-result';\n\n/**\n * Function signature for validator functions.\n */\nexport type IValidatorFunc = (\n  key: PropertyKey,\n  newValue: any,\n  oldValue: any\n) => IValidationMeta;\n\n/**\n * A validation map is an object containing the mapping between the target\n * schema and validator functions.\n */\nexport interface IValidationMap {\n  [key: string]: IValidatorFunc | IValidatorFunc[];\n}\n\n/**\n * If no validator is found, this is the default message returned by the\n * validator function.\n *\n * @internal\n */\nexport const defaultValidatorMessage = 'No validator found';\n\n/**\n * If no validator is found, this is the default validation returned by the\n * validator function.\n *\n * @internal\n */\nexport const defaultValidatorValidation = true;\n\n/**\n * If no validator is found, this is the default validator function.\n *\n * @internal\n */\nexport const defaultValidator: IValidatorFunc = (key, value, oldValue) => {\n  return {\n    message: defaultValidatorMessage,\n    validation: defaultValidatorValidation\n  };\n};\n\n/**\n * Looks up validator function(s) from a validator map. If none are found, fall\n * back to the `defaultValidator`.\n *\n * ```ts\n * const original = { foo: null };\n * const validationMap = {\n *   foo: validatePresence(),\n *   bar: [\n *     validatePresence(),\n *     validateLength({ gt: 2 })\n *   ]\n * };\n * validatorLookup(validationMap, 'foo'); // IValidatorFunc[]\n * ```\n *\n * @param validations\n * @param key\n */\nexport default function validatorLookup(\n  validations: IValidationMap,\n  key: PropertyKey\n): IValidatorFunc[] {\n  const validator = validations[key] || defaultValidator;\n  return Array.isArray(validator) ? validator : [validator];\n}\n","import { IBufferChange, IBufferError } from './buffered-proxy';\n\nexport interface IValidationMeta {\n  validation: boolean;\n  message: string;\n}\n\n/**\n * Wrapper class for post-validation changes to a `BufferedProxy`. All validator\n * functions return an instance of this class, to allow for a single interface\n * when updating the state of a `BufferedProxy`.\n */\nexport default class ValidationResult {\n  /**\n   * The key being validated.\n   *\n   * ```ts\n   * validatedResult.key; // 'name'\n   * ```\n   */\n  public key: PropertyKey;\n\n  /**\n   * The value being validated.\n   *\n   * ```ts\n   * validatedResult.value; // 'Lauren'\n   * ```\n   */\n  public value: any;\n\n  /**\n   * Result of the validations.\n   *\n   * ```ts\n   * validationResult.validations;\n   * [\n   *   { message: 'must be a string', validation: false },\n   *   { message: 'must be at least 2 characters', validation: true }\n   * ];\n   * ```\n   */\n  public validations: IValidationMeta[];\n\n  /**\n   * Creates a new instance of `ValidationResult`.\n   *\n   * ```ts\n   * new ValidationResult('name', 123, [\n   *   { message: 'must be a string', validation: false },\n   *   { message: 'must be at least 2 characters', validation: true }\n   * ]);\n   * ```\n   *\n   * @param value\n   * @param meta\n   */\n  constructor(key: PropertyKey, value: any, validations: IValidationMeta[]) {\n    this.key = key;\n    this.value = value;\n    this.validations = validations;\n  }\n\n  /**\n   * Validation message for use in case of validation failure.\n   *\n   * ```ts\n   * validationResult.message; // 'key cannot be blank'\n   * ```\n   */\n  public get messages(): string[] {\n    return this.validations.map(v => v.message);\n  }\n\n  /**\n   * Is the change valid?\n   *\n   * ```ts\n   * validationResult.isValid; // true\n   * ```\n   */\n  public get isValid(): boolean {\n    return this.validations.every(v => v.validation === true);\n  }\n\n  /**\n   * Is the change invalid?\n   *\n   * ```ts\n   * validationResult.isInvalid; // true\n   * ```\n   */\n  public get isInvalid(): boolean {\n    return !this.isValid;\n  }\n}\n","import BufferedProxy, {\n  BufferErrorHandler,\n  BufferExecutionHandler\n} from './buffered-proxy';\nimport validatorLookup, { IValidationMap } from './utils/validator-lookup';\nimport ValidationResult from './validation-result';\n\nexport interface IValidatedProxyOptions {\n  executionHandler?: BufferExecutionHandler;\n  errorHandler?: BufferErrorHandler;\n  validations: IValidationMap;\n}\n\n/**\n * Wraps a target object with a `BufferedProxy`. Setters will first invoke a\n * validator function, if found in a supplied validation map. The validator\n * function returns a `ValidatedResult`, and the `BufferedProxy` is set. Getters\n * will forward to the target object, first returning the error, then the\n * change, and finally the original value;\n *\n * If the result is valid, the value is set into the `BufferedProxy`'s internal\n * value cache.\n *\n * If the result is invalid, the value is set into the `BufferedProxy`'s internal\n * error cache.\n *\n * ```ts\n * const user = {\n *   name: 'Billy Bob',\n *   age: 25\n * };\n * const bufferedProxy = validatedProxy(user, {\n *   validations: {\n *     name: [\n *       validatePresence(true),\n *       validateLength({ min: 4 })\n *     ],\n *     age: [\n *       validatePresence(true),\n *       validateNumber({ gte: 18 })\n *     ]\n *   }\n * });\n * bufferedProxy.name = 'Michael Bolton';\n * user.name; // 'Billy Bob'\n * bufferedProxy.flush();\n * user.name; // 'Michael Bolton'\n * ```\n *\n * @param target\n * @param validatedProxyOptions\n */\nexport default function validatedProxy(\n  target: object,\n  { errorHandler, executionHandler, validations }: IValidatedProxyOptions\n) {\n  const buffer = new BufferedProxy(target, {\n    errorHandler,\n    executionHandler\n  });\n  return new Proxy(buffer, {\n    get(targetBuffer, key, receiver) {\n      return targetBuffer.get(key);\n    },\n    set(targetBuffer, key, value, receiver) {\n      const validators = validatorLookup(validations, key);\n      const result = new ValidationResult(\n        key,\n        value,\n        validators.map(validate => validate(key, value, target[key]))\n      );\n      targetBuffer.set(key, result);\n      return true;\n    }\n  });\n}\n","export { default as BufferedProxy } from './buffered-proxy';\nexport { default as validatedProxy } from './validated-proxy';\nexport { default as ValidationResult } from './validation-result';\n"],"names":["has_own_property_1","buffered_proxy_1","validator_lookup_1","validation_result_1"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAYA,wBACE,GAAW;IACX,cAAsB;SAAtB,UAAsB,EAAtB,qBAAsB,EAAtB,IAAsB;QAAtB,6BAAsB;;IAEtB,OAAO,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;CACzD;AALD,iCAKC;;;;;;;;;;;;;;ACiBD,IAAM,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC;;;;;;AAO9C,IAAM,mBAAmB,GAAG,eAAQ,CAAC;;;;;;;;;AAUrC;;;;;;;;;;;;IA0BE,uBACE,MAAc,EACd,EAAuD;YAAvD,4BAAuD,EAArD,8BAAY,EAAE,sCAAgB;QAhB1B,KAAC,WAAW,CAAC,GAAiB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAkBxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,YAAY,IAAI,mBAAmB,CAAC;QACxD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,uBAAuB,CAAC;QACpE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;KAC3B;IASD,sBAAW,kCAAO;;;;;;;;aAAlB;YACE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAAc;oBAAZ,YAAG,EAAE,gBAAK;gBAChD,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACjB,OAAO,GAAG,CAAC;aACZ,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACzB;;;OAAA;IAeD,sBAAW,kCAAO;;;;;;;;;;;;;;aAAlB;YACE,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAAwB;oBAAtB,YAAG,EAAE,sBAAQ,EAAE,gBAAK;gBAC5D,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,CAAC;gBAC/B,OAAO,GAAG,CAAC;aACZ,EAAE,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACzB;;;OAAA;IASD,sBAAW,kCAAO;;;;;;;;aAAlB;YACE,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,UAAC,EAAc;oBAAZ,YAAG,EAAE,gBAAK;gBACxC,OAAO,EAAE,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,CAAC;aACvB,CAAC,CAAC;SACJ;;;OAAA;IAYD,sBAAW,iCAAM;;;;;;;;;;;aAAjB;YACE,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAC,EAAwB;oBAAtB,YAAG,EAAE,sBAAQ,EAAE,gBAAK;gBACpD,OAAO,EAAE,GAAG,KAAA,EAAE,QAAQ,UAAA,EAAE,KAAK,OAAA,EAAE,CAAC;aACjC,CAAC,CAAC;SACJ;;;OAAA;;;;;;;;;;;;;;;;;;;;;;;IAwBM,2BAAG,GAAV,UAAW,GAAgB,EAAE,MAAwB;QACnD,IAAI,GAAG,KAAK,WAAW,EAAE;YACvB,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC;YACtC,OAAO;SACR;QACD,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACpC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;KACjC;;;;;;;;;;;;;;IAeM,6BAAK,GAAZ;QACE,IAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACjE,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,OAAO,OAAO,CAAC;KAChB;;;;;;;;;;;IAYM,2BAAG,GAAV,UAAW,GAAgB;QACzB,IAAIA,wBAAc,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE;YACnC,OAAO,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;SAC5C;QACD,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;YACb,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;SAClB;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KACzB;;;;;;;;;;IAWM,6BAAK,GAAZ;QACE,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KACpD;IAED,sBAAY,gCAAK;aAAjB;YACE,OAAO,IAAI,CAAC,SAAS,CAAC;SACvB;;;OAAA;IAEO,mCAAW,GAAnB,UAAoB,MAAwB;QAC1C,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;QAC9C,OAAO,MAAM,CAAC;KACf;IAED,sBAAY,uCAAY;aAAxB;YACE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,GAAA,CAAC,CAAC;SACzD;;;OAAA;IAED,sBAAY,yCAAc;aAA1B;YACE,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,GAAA,CAAC,CAAC;SAC3D;;;OAAA;IACH,oBAAC;CAAA,IAAA;;;;;;;;;;;;;;;AClOY,+BAAuB,GAAG,oBAAoB,CAAC;;;;;;;AAQ/C,kCAA0B,GAAG,IAAI,CAAC;;;;;;AAOlC,wBAAgB,GAAmB,UAAC,GAAG,EAAE,KAAK,EAAE,QAAQ;IACnE,OAAO;QACL,OAAO,EAAE,+BAAuB;QAChC,UAAU,EAAE,kCAA0B;KACvC,CAAC;CACH,CAAC;;;;;;;;;;;;;;;;;;;;AAqBF,yBACE,WAA2B,EAC3B,GAAgB;IAEhB,IAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,wBAAgB,CAAC;IACvD,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,CAAC,SAAS,CAAC,CAAC;CAC3D;AAND,kCAMC;;;;;;;;;;;;;;;;AC5DD;;;;;;;;;;;;;;IA6CE,0BAAY,GAAgB,EAAE,KAAU,EAAE,WAA8B;QACtE,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAChC;IASD,sBAAW,sCAAQ;;;;;;;;aAAnB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,GAAA,CAAC,CAAC;SAC7C;;;OAAA;IASD,sBAAW,qCAAO;;;;;;;;aAAlB;YACE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,IAAI,GAAA,CAAC,CAAC;SAC3D;;;OAAA;IASD,sBAAW,uCAAS;;;;;;;;aAApB;YACE,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;SACtB;;;OAAA;IACH,uBAAC;CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CD,wBACE,MAAc,EACd,EAAuE;QAArE,8BAAY,EAAE,sCAAgB,EAAE,4BAAW;IAE7C,IAAM,MAAM,GAAG,IAAIC,qBAAa,CAAC,MAAM,EAAE;QACvC,YAAY,cAAA;QACZ,gBAAgB,kBAAA;KACjB,CAAC,CAAC;IACH,OAAO,IAAI,KAAK,CAAC,MAAM,EAAE;QACvB,GAAG,YAAC,YAAY,EAAE,GAAG,EAAE,QAAQ;YAC7B,OAAO,YAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;SAC9B;QACD,GAAG,YAAC,YAAY,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ;YACpC,IAAM,UAAU,GAAGC,yBAAe,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACrD,IAAM,MAAM,GAAG,IAAIC,wBAAgB,CACjC,GAAG,EACH,KAAK,EACL,UAAU,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC,CAC9D,CAAC;YACF,YAAY,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC;SACb;KACF,CAAC,CAAC;CACJ;AAvBD,iCAuBC;;;;;;;;;AC3EQ,sCAAA,OAAO,CAAiB;;AACxB,0CAAA,OAAO,CAAkB;;AACzB,4CAAA,OAAO,CAAoB;;;;;;;;;;;;"}